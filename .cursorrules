You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Key Principles
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

Examples of database usage:// Get user's current position in a book
const getCurrentPosition = async (userId: string, bookId: string) => {
  return await db.query.userBookProgress.findFirst({
    where: eq(userBookProgress.userId, userId) && 
          eq(userBookProgress.bookId, bookId),
    with: {
      sequences: true
    }
  });
};

// Update user's progress
const updateProgress = async (
  userId: string, 
  bookId: string, 
  sequenceNumber: number,
  timeSpent: number
) => {
  return await db.update(userBookProgress)
    .set({ 
      lastSequenceNumber: sequenceNumber,
      lastReadAt: new Date(),
      totalTimeSpent: sql`total_time_spent + ${timeSpent}`
    })
    .where(
      eq(userBookProgress.userId, userId) && 
      eq(userBookProgress.bookId, bookId)
    );
};

// Get user's reading history with media
const getReadingHistory = async (userId: string) => {
  return await db.query.userSequenceHistory.findMany({
    where: eq(userSequenceHistory.userId, userId),
    with: {
      sequence: {
        with: {
          media: true
        }
      }
    },
    orderBy: desc(userSequenceHistory.viewedAt)
  });
};

Never change the uploadthing token in the .env file the security has been updated to use the token in the server environment.
Setting up your environment
Install the packages
npm
pnpm
yarn
bun
npm install uploadthing @uploadthing/react

Copy
Copied!
Add env variables
.env
UPLOADTHING_TOKEN=... # A token for interacting with the SDK

Copy
Copied!
If you don't already have a uploadthing secret key, sign up ↗ and create one from the dashboard! ↗
